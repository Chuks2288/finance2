generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String    @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  ipAddress         String?
  loginDate         DateTime?
  loginDevice       String?
  accounts          Account[]
  sessions          Session[]
  dwollaCustomerId  String? // Added Dwolla customer ID
  dwollaCustomerUrl String? // Added Dwolla customer URL

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Bank      Bank[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  // Plaid-specific fields
  plaidId          String?
  fundingSourceUrl String? // Dwolla-specific field
  sharableId       String? // Encrypted ID for sharing

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bank {
  id               String  @id @default(cuid())
  userId           String
  plaidId          String? // Plaid-specific identifier
  bankId           String? // Item ID from Plaid
  accountId        String? // Account ID from Plaid
  accessToken      String? // Access token from Plaid
  fundingSourceUrl String? // Dwolla-specific field
  sharableId       String? // Encrypted ID for sharing

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Accounts {
  id      String  @id @default(cuid())
  name    String
  plaidId String?
  userId  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions Transactions[] // One-to-many relationship
}

model Categories {
  id      String  @id @default(cuid())
  name    String
  plaidId String?
  userId  String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  transactions Transactions[] // One-to-many relationship
}

model Transactions {
  id     String   @id @default(cuid())
  date   DateTime
  payee  String
  amount Int
  note   String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  accountId String // Foreign key
  account   Accounts @relation(fields: [accountId], references: [id], onDelete: Cascade)

  categoryId String? // Foreign key
  category   Categories? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model UserSubscription {
  id     String @id @default(cuid()) @map("_id")
  userId String @unique

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}
